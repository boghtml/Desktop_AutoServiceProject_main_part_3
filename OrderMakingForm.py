# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'OrderMakingForm.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtWidgets
# Імпортуйте QDate для роботи з датами
from PyQt5.QtCore import QDate
from PyQt5.QtWidgets import QMessageBox

from Calses.AutoService import AutoService
from Calses.CarOrder import CarOrder
from Calses.signals import signals
from DataBase_trial.DataBase import add_order_base, add_employee_status, get_employee_id_by_name, \
    get_busy_employees_ids
from DetailedOrderForm import DetailedOrderForm
from FormDesign.OrderMakingForm_design import Ui_Form


class OrderMakingForm(QtWidgets.QWidget, Ui_Form):
    def __init__(self):
        super(OrderMakingForm, self).__init__()
        self.setupUi(self)
        self.autoService = AutoService.get_instance()
        self.selected_services = []

        self.lineEditForPricePrint.setReadOnly(True)

        self.tableWidgetForOutputCars.setColumnWidth(1, 225)

        self.dateEditForDateInput.setDate(QDate.currentDate())
        self.dateEditForDateInput.setCalendarPopup(True)
        self.dateEditForDateInput.setMaximumDate(QDate.currentDate())
        # ---------

        self.populateCarComboBox()
        self.populateServicesComboBox()
        try:
            self.populateWorkerComboBox()
        except Exception as e:
            print(e)

        #    self.comboBoxForChosingCars.currentIndexChanged.connect(self.updateServiceComboBox)
        self.pushButtonForAddService.clicked.connect(self.addServiceToOrder)
        self.pushButtonForAddOrder.clicked.connect(self.addOrderToTable)
        try:
            self.pushButton_ForAddWorkerToWork.clicked.connect(self.addWorkerToWork)
        except Exception as e:
            print(e)

        self.pushButtonDetailedServices.clicked.connect(self.openDetailedServicesForm)

        signals.order_updated.connect(self.updateOrderTable1)
        signals.employee_status_changed.connect(self.updateEmployeeData)
        signals.car_added.connect(self.populateCarComboBox)
        signals.employee_added.connect(self.populateWorkerComboBox)
        signals.services_added.connect(self.populateServicesComboBox)

        try:
            self.updateOrderTable1()
            self.updateEmployeeData()
        except Exception as e:
            print(e)

    def populateCarComboBox(self):
        self.comboBoxForChosingCars.clear()
        cars = self.autoService.get_cars()
        for car in cars:
            car_info = f"{car.get_brand()} {car.get_model()} {car.get_year()}"
            self.comboBoxForChosingCars.addItem(car_info)

    def populateServicesComboBox(self):
        self.comboBoxForChoseService.clear()
        services = self.autoService.get_services()
        for service in services:
            service_info = f"{service.get_name()} - {service.get_price()}"
            self.comboBoxForChoseService.addItem(service_info)

    def updateServiceComboBox(self):
        selected_car_index = self.comboBoxForChosingCars.currentIndex()
        if selected_car_index != -1:
            selected_car = self.autoService.get_cars()[selected_car_index]
            self.comboBoxForChoseService.clear()
            for service in selected_car.get_services():
                self.comboBoxForChoseService.addItem(f"{service.get_name()} - {service.get_price()}")
        else:
            print("No cars available.")  # Додайте повідомлення про відсутність автомобілів

    def populateWorkerComboBox(self):
        self.comboBox_ForChoseWorkerToWork.clear()
        busy_employees_ids = get_busy_employees_ids()  # Отримуємо ID зайнятих працівників
        free_workers = [worker for worker in self.autoService.getEmployees() if
                        worker.get_id() not in busy_employees_ids]

        for worker in free_workers:
            worker_info = f"{worker.get_name()} - {worker.get_position()}"
            self.comboBox_ForChoseWorkerToWork.addItem(worker_info, worker)

    def addServiceToOrder(self):

        # self.updateTotalPrice()
        # self.addServiceToTable()
        try:
            selected_service_index = self.comboBoxForChoseService.currentIndex()
            if selected_service_index != -1:
                selected_service = self.autoService.get_services()[selected_service_index]
                self.selected_services.append(selected_service)
                self.updateTotalPrice()
                self.addServiceToTable(selected_service)
            else:
                print("No service selected.")  # Додайте повідомлення про відсутність обраної послуги

        except Exception as e:
            print(e)

    def updateTotalPrice(self):
        # Оновлення загальної вартості
        total_price = sum(service.get_price() for service in self.selected_services)
        self.lineEditForPricePrint.setText(str(total_price))

    def addServiceToTable(self, selected_service):
        price = selected_service.get_price()  # Отримати ціну послуги без методу get_service_price
        row_position = self.tableWidget_CurentService.rowCount()
        self.tableWidget_CurentService.insertRow(row_position)
        self.tableWidget_CurentService.setItem(row_position, 0, QtWidgets.QTableWidgetItem(
            selected_service.get_name()))  # Отримати назву послуги
        self.tableWidget_CurentService.setItem(row_position, 1, QtWidgets.QTableWidgetItem(str(price)))

    def addOrderToTable(self):

        if self.tableWidget_AddWorkerToWork.rowCount() == 0:
            QMessageBox.warning(self, 'Помилка', 'Будь ласка, додайте принаймні одного працівника до роботи.')
            return

        try:
            for row in range(self.tableWidget_AddWorkerToWork.rowCount()):
                worker_name = self.tableWidget_AddWorkerToWork.item(row, 0).text()
                worker_id = get_employee_id_by_name(worker_name)
                add_employee_status(worker_id, "зайнятий")
            QMessageBox.information(self, 'Успіх', 'Замовлення та статус працівників успішно додано.')

            self.tableWidget_AddWorkerToWork.clearContents()
            self.tableWidget_AddWorkerToWork.setRowCount(0)

            signals.employee_status_changed.emit()

        except Exception as e:
            print(e)

        if not self.selected_services:
            QMessageBox.warning(self, 'Помилка', 'Будь ласка, додайте послуги до замовлення.')
            return

        date = self.dateEditForDateInput.date().toString("dd-MM-yyyy")
        if not date:
            QMessageBox.warning(self, 'Помилка', 'Будь ласка, введіть дату замовлення.')
            return

        selected_car_info = self.comboBoxForChosingCars.currentText()

        selected_car_index = self.comboBoxForChosingCars.currentIndex()
        if selected_car_index != -1:
            selected_car = self.autoService.get_cars()[selected_car_index]
            selected_services = [self.tableWidget_CurentService.item(row, 0).text() for row in
                                 range(self.tableWidget_CurentService.rowCount())]
            total_price = sum(self.autoService.get_service_price(service) for service in selected_services)

            try:

                selected_services_names1 = [self.tableWidget_CurentService.item(row, 0).text() for row in
                                            range(self.tableWidget_CurentService.rowCount())]

                # Отримуємо об'єкти послуг з назв, які були вибрані в GUI
                selected_services1 = [self.autoService.get_service_by_name(service_name) for service_name in
                                      selected_services_names1]

                new_order = CarOrder(total_price, date, selected_car, selected_services1)

                try:
                    new_order_dict = new_order.to_dict()

                    order_id = add_order_base(new_order_dict)  # Додаємо замовлення до бази даних
                    new_order._id = order_id  # Зберігаємо ID замовлення
                except Exception as e:
                    print(e)

                self.autoService.add_order(new_order)
            except Exception as e:
                print(e)

            # Додавання інформації про замовлення до таблиці
            #    row_position = self.tableWidgetForOutputCars.rowCount()
            #    self.tableWidgetForOutputCars.insertRow(row_position)
            #    self.tableWidgetForOutputCars.setItem(row_position, 0, QtWidgets.QTableWidgetItem(selected_car_info))
            #     self.tableWidgetForOutputCars.setItem(row_position, 1,
            #                                          QtWidgets.QTableWidgetItem(", ".join(selected_services)))
            #    self.tableWidgetForOutputCars.setItem(row_position, 2, QtWidgets.QTableWidgetItem(str(total_price)))
            #    self.tableWidgetForOutputCars.setItem(row_position, 3, QtWidgets.QTableWidgetItem(date))

            # Очищення форми після додавання замовлення
            self.clearOrderForm()
            try:
                self.populateWorkerComboBox()
            except Exception as e:
                print(e)
        else:
            print("No car selected.")  # Виведення повідомлення, якщо не вибрано авто

    def addWorkerToWork(self):
        selected_index = self.comboBox_ForChoseWorkerToWork.currentIndex()
        selected_worker = self.comboBox_ForChoseWorkerToWork.itemData(selected_index)
        row_position = self.tableWidget_AddWorkerToWork.rowCount()
        self.tableWidget_AddWorkerToWork.insertRow(row_position)
        self.tableWidget_AddWorkerToWork.setItem(row_position, 0,
                                                 QtWidgets.QTableWidgetItem(selected_worker.get_name()))
        self.tableWidget_AddWorkerToWork.setItem(row_position, 1,
                                                 QtWidgets.QTableWidgetItem(selected_worker.get_position()))
        # Можете додати ще дані про працівника за потребою

    def updateOrderTable1(self):
        self.tableWidgetForOutputCars.clearContents()
        self.tableWidgetForOutputCars.setRowCount(0)

        orders = self.autoService.get_orders()  # Використовуємо ваш існуючий метод
        for order in orders:
            row_position = self.tableWidgetForOutputCars.rowCount()
            self.tableWidgetForOutputCars.insertRow(row_position)
            car_info = f"{order.car.get_brand()} {order.car.get_model()} {order.car.get_year()}"  # Припускаємо, що car є об'єктом
            self.tableWidgetForOutputCars.setItem(row_position, 0, QtWidgets.QTableWidgetItem(car_info))
            services_names = ", ".join(order.get_ordered_services_names())  # Використовуємо новий метод
            self.tableWidgetForOutputCars.setItem(row_position, 1, QtWidgets.QTableWidgetItem(services_names))
            self.tableWidgetForOutputCars.setItem(row_position, 2, QtWidgets.QTableWidgetItem(
                str(order.cost)))  # Переконайтеся, що cost є атрибутом CarOrder
            self.tableWidgetForOutputCars.setItem(row_position, 3, QtWidgets.QTableWidgetItem(order.date))

    def updateOrderTable(self):
        # Оновлення таблиці
        self.tableWidgetForOutputCars.clearContents()
        self.tableWidgetForOutputCars.setRowCount(0)

        cars = self.autoService.get_cars()
        for i, car in enumerate(cars):
            orders = car.get_orders()
            for order in orders:
                print("Update Order table:", order)
                if isinstance(order, CarOrder):
                    self.tableWidgetForOutputCars.insertRow(self.tableWidgetForOutputCars.rowCount())
                    self.tableWidgetForOutputCars.setItem(i, 0, QtWidgets.QTableWidgetItem(
                        f"{car.get_brand()} {car.get_model()} {car.get_year()}"))
                    self.tableWidgetForOutputCars.setItem(i, 1, QtWidgets.QTableWidgetItem(
                        ", ".join(order.get_ordered_parts())))
                    self.tableWidgetForOutputCars.setItem(i, 2, QtWidgets.QTableWidgetItem(str(order.get_cost())))
                    self.tableWidgetForOutputCars.setItem(i, 3, QtWidgets.QTableWidgetItem(order.get_date()))

    def clearOrderForm(self):
        # Очищення форми замовлення
        self.lineEditForPricePrint.clear()
        self.selected_services = []

        # Оновлення таблиці після очищення форми
        # self.updateOrderTable()
        self.clearServiceTable()

    def clearServiceTable(self):
        self.tableWidget_CurentService.clearContents()
        self.tableWidget_CurentService.setRowCount(0)

    def openDetailedServicesForm(self):
        self.detailedOrderForm = DetailedOrderForm()
        self.detailedOrderForm.show()

    def updateEmployeeData(self):
        self.populateWorkerComboBox()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = OrderMakingForm()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
