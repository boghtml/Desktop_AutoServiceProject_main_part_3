# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainForm.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtGui
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtCore import QTimer

from Clases.signals import signals
from DataBase.DataBase import get_unviewed_clients_count
from MainFunctionality.CarManagerForm import CarManegerForm
from MainFunctionality.ClientManagementForm import ClientManagementForm
from MainFunctionality.DisplayHistoryCarsForm import DisplayHistoryCarsForm
from MainFunctionality.EmployeeManagementForm import EmployeeManegementForm
from MainFunctionality.AnalyticsForm import AnalyticsForm

from FormDesign.FormHandlers.MainForm_design import Ui_Form
from OrderMakingForm import OrderMakingForm
from ServiceManagementForm import ServiceManagementForm


class MainForm(QtWidgets.QWidget, Ui_Form):
    def __init__(self, is_admin=False, parent=None):
        super(MainForm, self).__init__(parent)
        self.is_admin = is_admin

        self.setupUi(self)

        self.logoutButton.clicked.connect(self.logout)

        self.configure_ui()

        self.pushButton_EmpoyeeReporting.setVisible(self.is_admin)
        self.pushButtonServiseAdd.setVisible(self.is_admin)
        self.pushButtonServiceAnalytics.setVisible(self.is_admin)
        self.label_ForShowNonAccessAdmin.setVisible(not self.is_admin)

        self.pushButtonForWorkWithAuto.clicked.connect(self.openCarManagementForm)
        self.pushButtonForWorkWithWorkers.clicked.connect(self.openEmployeeManagementForm)
        self.pushButtonForOrderCreating.clicked.connect(self.openOrderMakingForm)
        self.pushButtonForOrderHistory.clicked.connect(self.openHistoryCarsForm)
        self.pushButtonServiseAdd.clicked.connect(self.openServiceManagementForm)
        self.pushButton_EmpoyeeReporting.clicked.connect(self.openEmployeeReportForm)
        self.pushButton_PotentialClients.clicked.connect(self.openClientManagementForm)

        self.pushButtonServiceAnalytics.clicked.connect(self.openAnalyticsForm)

        self.openWindows = {}
        try:
            self.check_new_clients()
            signals.new_clients_count_updated.connect(self.update_new_clients_label)

            # Встановлення таймера
            self.timer = QTimer(self)
            self.timer.timeout.connect(self.check_new_clients)  # Підключення таймера до методу перевірки нових клієнтів
            self.timer.start(20000)  # Запуск таймера з інтервалом в 20 секунд
        except Exception as e:
            print(e)

    def update_new_clients_label(self, count):
        self.label_ForPrintingCountOfNewClients.setText(f"{count}")

    def check_new_clients(self):
        try:
            new_clients_count = get_unviewed_clients_count()  # Функція, яку ви повинні створити
            self.label_ForPrintingCountOfNewClients.setText(f"{new_clients_count}")
        except Exception as e:
            print(f"Помилка при отриманні даних про нових клієнтів: {e}")

    def openClientManagementForm(self):
        try:
            if 'openClientManagementForm' not in self.openWindows:
                self.openWindows[
                    'openClientManagementForm'] = ClientManagementForm()
            self.openWindows['openClientManagementForm'].show()
        except Exception as e:
            print(e)

    def openAnalyticsForm(self):
        try:
            if 'openAnalyticsForm' not in self.openWindows:
                self.openWindows[
                    'openAnalyticsForm'] = AnalyticsForm()  # Це викличе setupUi в конструкторі CarManegerForm
            self.openWindows['openAnalyticsForm'].show()
        except Exception as e:
            print(e)

    def openCarManagementForm(self):
        if 'carManagement' not in self.openWindows:
            self.openWindows['carManagement'] = CarManegerForm()  # Це викличе setupUi в конструкторі CarManegerForm
        self.openWindows['carManagement'].show()

    def openEmployeeReportForm(self):
        from MainFunctionality.EmployeeReportForm import EmployeeReportForm
        if 'employeeReportForm' not in self.openWindows:
            self.openWindows[
                'employeeReportForm'] = EmployeeReportForm()  # Це викличе setupUi в конструкторі CarManegerForm
        self.openWindows['employeeReportForm'].show()

    def openEmployeeManagementForm(self):
        if 'employeeManagement' not in self.openWindows:
            self.openWindows['employeeManagement'] = EmployeeManegementForm()
        self.openWindows['employeeManagement'].show()

    def openServiceManagementForm(self):
        if 'serviceManagement' not in self.openWindows:
            self.openWindows['serviceManagement'] = ServiceManagementForm()
        self.openWindows['serviceManagement'].show()

    def openOrderMakingForm(self):
        if 'orderMaking' not in self.openWindows:
            self.openWindows['orderMaking'] = OrderMakingForm()
        self.openWindows['orderMaking'].show()

    def openHistoryCarsForm(self):
        if 'historyCars' not in self.openWindows:
            self.openWindows['historyCars'] = DisplayHistoryCarsForm()
        self.openWindows['historyCars'].show()

    def configure_ui(self):
        try:
            if self.is_admin:

                self.logoutButton.setIcon(QtGui.QIcon('D://Qt_designer//Images//admin.png'))
                self.logoutButton.setToolTip("Ви ввійшли як адміністратор.\nКлікніть для виходу.")
            else:

                self.logoutButton.setIcon(QtGui.QIcon('D://Qt_designer//Images//simple_user.png'))
                self.logoutButton.setToolTip("Ви ввійшли як звичайний користувач.\nКлікніть для виходу.")
        except Exception as e:
            print(e)

        self.logoutButton.setIconSize(self.logoutButton.size())
        self.logoutButton.setFlat(True)

        self.pushButtonServiseAdd.setText("Робота з послугами")

    def logout(self):
        from MainFunctionality.LoginForm import Autorization

        # Створення діалогового вікна з питанням
        reply = QMessageBox.question(self, 'Підтвердження', "Ви дійсно хочете вийти?",
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)

        if reply == QMessageBox.Yes:
            # Закриття всіх відкритих вікон
            for window in self.openWindows.values():
                window.close()
            self.openWindows.clear()  # Очищення словника з відкритими вікнами

            # Перехід до форми авторизації
            self.close()
            self.login_form = Autorization()
            self.login_form.show()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    mainForm = MainForm()
    mainForm.show()
    sys.exit(app.exec_())

''' 
    def initialization(self):

        self.initializeCarsFromDB()
        self.initializeEmpoyeeFromDB()
        self.initializeServicesFromDB()

        try:
            self.initializeOrdersFromDB()
        except Exception as e:
            print(e)


    def initializeOrdersFromDB(self):
        if not self.autoService.get_orders():
            orders_from_db = get_orders_base()  # отримати всі замовлення з бази даних
            for order_data in orders_from_db:
                car = self.autoService.get_car_by_id(order_data['car_id'])  # отримати авто за ID
                services = [self.autoService.get_service_by_id(service_id) for service_id in
                            order_data['services']]  # отримати послуги за ID

                if car and all(services):  # перевірка чи всі об'єкти були успішно отримані
                    print("Інформація про читання:", order_data['cost'], order_data['date'], car, services,
                          order_data['_id'])
                    new_order = CarOrder(order_data['cost'], order_data['date'], car, services, order_data['_id'])
                    self.autoService.add_order(new_order)  # додати замовлення до AutoService

    def initializeCarsFromDB(self):
        if not self.autoService.get_cars():  # Перевірка на відсутність автомобілів
            cars_from_db = get_cars_base()
            for car_data in cars_from_db:
                try:
                    car = Car(car_data['brand'], car_data['model'], car_data['year'], car_data['_id'])
                    self.autoService.add_car(car)
                except Exception as e:
                    print(e)

    def initializeEmpoyeeFromDB(self):
        if not self.autoService.getEmployees():
            employees_from_db = get_employees_base()  # Отримуємо список працівників з бази даних
            for emp_data in employees_from_db:
                # Створюємо екземпляри класу Employee на основі даних з бази даних
                employee = Employee(emp_data['name'], emp_data['position'], emp_data['salary'], emp_data['_id'])
                if not any(emp for emp in self.autoService.getEmployees() if
                           emp.get_name() == employee.get_name() and emp.get_position() == employee.get_position()):
                    self.autoService.addEmployee(employee)  # Додаємо працівника до AutoService, якщо він унікальний

    def initializeServicesFromDB(self):
        if not self.autoService.get_services():
            services_from_db = get_services_base()
            for service_data in services_from_db:
                service = Service(service_data['name'], service_data['price'], service_data['_id'])
                self.autoService.add_service(service)

    # def initializeServices(self):
    #    self.autoService.add_service(Service("Заміна масла", 500.0))
    #    self.autoService.add_service(Service("Заміна фільтрів", 300.0))
    #    self.autoService.add_service(Service("Діагностика ходової", 400.0))
    #    self.autoService.add_service(Service("Ремонт двигуна", 2000.0))
    # #   self.autoService.add_service(Service("Заправка кондиціонера", 250.0))
    #    self.autoService.add_service(Service("Заміна тормозів", 600.0))
    #    self.autoService.add_service(Service("Регулювання клапанів", 800.0))
    #    self.autoService.add_service(Service("Діагностика двигуна", 700.0))
    #    self.autoService.add_service(Service("Заміна ремня ГРМ", 1000.0))
    #    self.autoService.add_service(Service("Підготовка до ТО", 350.0))

    # def initializeServices1(self):
    #    existing_services = get_services_base()  # отримати всі послуги з бази даних
    #    existing_service_names = [service['name'] for service in existing_services]  # імена існуючих послуг
    #
    #    services_to_add = [
    #        Service("Заміна масла", 500.0),
    #        Service("Заміна фільтрів", 300.0),
    #        Service("Діагностика ходової", 400.0),
    #        Service("Ремонт двигуна", 2000.0),
    #        Service("Заправка кондиціонера", 250.0),
    #        Service("Заміна тормозів", 600.0),
    #        Service("Регулювання клапанів", 800.0),
    #        Service("Діагностика двигуна", 700.0),
    #        Service("Заміна ремня ГРМ", 1000.0),
    #        Service("Підготовка до ТО", 350.0)
    #    ]
    #
    #    for service in services_to_add:
    #        if service.get_name() not in existing_service_names:  # перевірка чи послуга вже є в базі
    #            service_id = add_service_base(service)  # додати послугу до бази даних
    #            service._id = service_id  # зберегти id послуги
    #        self.autoService.add_service(service)  # додати послугу до AutoService

    '''
