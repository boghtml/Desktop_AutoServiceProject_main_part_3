# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'OrderMakingForm.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore
from PyQt5 import QtWidgets
from PyQt5.QtCore import QDate
from PyQt5.QtWidgets import QMessageBox

from Clases.AutoService import AutoService
from Clases.CarOrder import CarOrder
from Clases.signals import signals
from DataBase.DataBase import add_order_base, add_employee_status, get_employee_id_by_name, \
    get_busy_employees_ids
from FormDesign.FormHandlers.OrderMakingForm_design import Ui_Form
from MainFunctionality.DetailedOrderForm import DetailedOrderForm


class OrderMakingForm(QtWidgets.QWidget, Ui_Form):
    def __init__(self):
        super(OrderMakingForm, self).__init__()
        self.setupUi(self)

        self.initializeUI()

        self.autoService = AutoService.get_instance()
        self.selected_services = []
        self.selected_workers = []
        self.lineEditForPricePrint.setReadOnly(True)

        self.tableWidgetForOutputCars.setColumnWidth(1, 225)

        self.dateEditForDateInput.setDate(QDate.currentDate())
        self.dateEditForDateInput.setCalendarPopup(True)
        self.dateEditForDateInput.setMaximumDate(QDate.currentDate())
        # ---------

        self.populateCarComboBox()
        self.populateServicesComboBox()
        try:
            self.populateWorkerComboBox()
        except Exception as e:
            print(e)

        #    self.comboBoxForChosingCars.currentIndexChanged.connect(self.updateServiceComboBox)
        self.pushButtonForAddService.clicked.connect(self.addServiceToOrder)
        self.pushButtonForAddOrder.clicked.connect(self.addOrderToTable)
        try:
            self.pushButton_ForAddWorkerToWork.clicked.connect(self.addWorkerToWork)
        except Exception as e:
            print(e)

        self.pushButtonDetailedServices.clicked.connect(self.openDetailedServicesForm)

        signals.order_updated.connect(self.updateOrderTable1)
        signals.employee_status_changed.connect(self.updateEmployeeData)
        signals.car_added.connect(self.populateCarComboBox)
        signals.employee_added.connect(self.populateWorkerComboBox)
        signals.services_added.connect(self.populateServicesComboBox)

        try:
            self.updateOrderTable1()
            self.updateEmployeeData()
        except Exception as e:
            print(e)

        self.pushButtonForDenyMakingOrder.clicked.connect(self.clearAllTablesAndComboBoxes)
        self.tableWidget_AddWorkerToWork.installEventFilter(self)
        self.tableWidget_CurentService.installEventFilter(self)

    def eventFilter(self, source, event):
        if (event.type() == QtCore.QEvent.KeyPress and
                event.key() == QtCore.Qt.Key_Delete):
            if source is self.tableWidget_AddWorkerToWork:
                self.removeSelectedWorker()
                return True
            elif source is self.tableWidget_CurentService:
                self.removeSelectedService()
                return True
        return super().eventFilter(source, event)

    def removeSelectedService(self):
        selected_rows = self.tableWidget_CurentService.selectionModel().selectedRows()
        if not selected_rows:
            return

        services_to_remove = []
        for model_index in reversed(selected_rows):  # Обробка з кінця, щоб не порушувати індекси
            row = model_index.row()
            service_name = self.tableWidget_CurentService.item(row, 0).text()
            services_to_remove.append(service_name)
            self.tableWidget_CurentService.removeRow(row)

        # Оновлюємо список вибраних послуг, видаляючи лише одне входження кожної послуги, що видаляється
        for service_name in services_to_remove:
            for i, service in enumerate(self.selected_services):
                if service.get_name() == service_name:
                    self.selected_services.pop(i)
                    break  # Зупиняємо цикл після видалення першого збігу

        self.updateTotalPrice()  # Оновлення ціни після видалення

    def removeSelectedWorker(self):
        try:
            selected_rows = self.tableWidget_AddWorkerToWork.selectionModel().selectedRows()
            if selected_rows:
                for model_index in reversed(selected_rows):
                    row = model_index.row()
                    worker_id = self.tableWidget_AddWorkerToWork.item(row, 0).data(QtCore.Qt.UserRole)
                    worker = next((w for w in self.selected_workers if w.get_id() == worker_id), None)
                    if worker:
                        # Видаляємо працівника зі списку вибраних
                        self.selected_workers.remove(worker)
                        self.tableWidget_AddWorkerToWork.removeRow(row)
                        # Додаємо працівника назад до ComboBox
                        self.comboBox_ForChoseWorkerToWork.addItem(f"{worker.get_name()} - {worker.get_position()}",
                                                                   worker)
        except Exception as e:
            print(e)

    def addWorkerToWork(self):
        try:
            selected_index = self.comboBox_ForChoseWorkerToWork.currentIndex()
            if selected_index == -1:
                return

            selected_worker = self.comboBox_ForChoseWorkerToWork.itemData(selected_index)

            # Перевіряємо, чи працівник вже доданий до таблиці
            if selected_worker in self.selected_workers:
                QMessageBox.warning(self, "Увага", "Цей працівник вже доданий до замовлення.")
                return

            row_position = self.tableWidget_AddWorkerToWork.rowCount()
            self.tableWidget_AddWorkerToWork.insertRow(row_position)

            name_item = QtWidgets.QTableWidgetItem(selected_worker.get_name())
            name_item.setData(QtCore.Qt.UserRole, selected_worker.get_id())

            self.tableWidget_AddWorkerToWork.setItem(row_position, 0, name_item)
            self.tableWidget_AddWorkerToWork.setItem(row_position, 1,
                                                     QtWidgets.QTableWidgetItem(selected_worker.get_position()))

            # Додаємо працівника до списку вибраних
            self.selected_workers.append(selected_worker)

            # Видаляємо працівника з comboBox
            self.comboBox_ForChoseWorkerToWork.removeItem(selected_index)
        except Exception as e:
            print(e)

    def populateWorkerComboBox(self):
        self.comboBox_ForChoseWorkerToWork.clear()
        busy_employees_ids = get_busy_employees_ids()
        free_workers = [worker for worker in self.autoService.getEmployees() if
                        worker.get_id() not in busy_employees_ids]

        for worker in free_workers:
            worker_info = f"{worker.get_name()} - {worker.get_position()}"
            # Тепер зберігаємо повний об'єкт працівника як userData
            self.comboBox_ForChoseWorkerToWork.addItem(worker_info, worker)

    def clearAllTablesAndComboBoxes(self):
        # Очищення таблиці послуг
        self.tableWidget_CurentService.clearContents()
        self.tableWidget_CurentService.setRowCount(0)
        # Очищення таблиці працівників
        self.tableWidget_AddWorkerToWork.clearContents()
        self.tableWidget_AddWorkerToWork.setRowCount(0)
        self.lineEditForPricePrint.clear()
        self.dateEditForDateInput.setDate(QDate.currentDate())

        self.populateWorkerComboBox()
        self.populateServicesComboBox()

    def populateCarComboBox(self):
        self.comboBoxForChosingCars.clear()
        cars = self.autoService.get_cars()
        for car in cars:
            car_info = f"{car.get_brand()} {car.get_model()} {car.get_year()}"
            self.comboBoxForChosingCars.addItem(car_info)

    def populateServicesComboBox(self):
        self.comboBoxForChoseService.clear()
        services = self.autoService.get_services()
        for service in services:
            service_info = f"{service.get_name()} - {service.get_price()}"
            self.comboBoxForChoseService.addItem(service_info)

    def updateServiceComboBox(self):
        selected_car_index = self.comboBoxForChosingCars.currentIndex()
        if selected_car_index != -1:
            selected_car = self.autoService.get_cars()[selected_car_index]
            self.comboBoxForChoseService.clear()
            for service in selected_car.get_services():
                self.comboBoxForChoseService.addItem(f"{service.get_name()} - {service.get_price()}")
        else:
            print("No cars available.")  # Додайте повідомлення про відсутність автомобілів

    def addServiceToOrder(self):

        # self.updateTotalPrice()
        # self.addServiceToTable()
        try:
            selected_service_index = self.comboBoxForChoseService.currentIndex()
            if selected_service_index != -1:
                selected_service = self.autoService.get_services()[selected_service_index]
                self.selected_services.append(selected_service)
                self.updateTotalPrice()
                self.addServiceToTable(selected_service)
            else:
                print("No service selected.")  # Додайте повідомлення про відсутність обраної послуги

        except Exception as e:
            print(e)

    def updateTotalPrice(self):
        # Оновлення загальної вартості
        total_price = sum(service.get_price() for service in self.selected_services)
        self.lineEditForPricePrint.setText(str(total_price))

    def addServiceToTable(self, selected_service):
        price = selected_service.get_price()  # Отримати ціну послуги без методу get_service_price
        row_position = self.tableWidget_CurentService.rowCount()
        self.tableWidget_CurentService.insertRow(row_position)
        self.tableWidget_CurentService.setItem(row_position, 0, QtWidgets.QTableWidgetItem(
            selected_service.get_name()))  # Отримати назву послуги
        self.tableWidget_CurentService.setItem(row_position, 1, QtWidgets.QTableWidgetItem(str(price)))

    def addOrderToTable(self):
        try:
            if self.tableWidget_AddWorkerToWork.rowCount() == 0:
                QMessageBox.warning(self, 'Помилка', 'Будь ласка, додайте принаймні одного працівника до роботи.')
                return

            try:
                for row in range(self.tableWidget_AddWorkerToWork.rowCount()):
                    worker_name = self.tableWidget_AddWorkerToWork.item(row, 0).text()
                    worker_id = get_employee_id_by_name(worker_name)
                    add_employee_status(worker_id, "зайнятий")
                QMessageBox.information(self, 'Успіх', 'Замовлення та статус працівників успішно додано.')

                self.tableWidget_AddWorkerToWork.clearContents()
                self.tableWidget_AddWorkerToWork.setRowCount(0)

                signals.employee_status_changed.emit()

            except Exception as e:
                print(e)

            if not self.selected_services:
                QMessageBox.warning(self, 'Помилка', 'Будь ласка, додайте послуги до замовлення.')
                return

            date = self.dateEditForDateInput.date().toString("dd-MM-yyyy")
            if not date:
                QMessageBox.warning(self, 'Помилка', 'Будь ласка, введіть дату замовлення.')
                return

            comment = self.plainTextEdit_ForAddingComentAboutWork.toPlainText()

            selected_car_info = self.comboBoxForChosingCars.currentText()

            selected_car_index = self.comboBoxForChosingCars.currentIndex()
            if selected_car_index != -1:
                selected_car = self.autoService.get_cars()[selected_car_index]
                selected_services = [self.tableWidget_CurentService.item(row, 0).text() for row in
                                     range(self.tableWidget_CurentService.rowCount())]
                total_price = sum(self.autoService.get_service_price(service) for service in selected_services)

                try:

                    selected_services_names1 = [self.tableWidget_CurentService.item(row, 0).text() for row in
                                                range(self.tableWidget_CurentService.rowCount())]

                    # Отримуємо об'єкти послуг з назв, які були вибрані в GUI
                    selected_services1 = [self.autoService.get_service_by_name(service_name) for service_name in
                                          selected_services_names1]

                    new_order = CarOrder(total_price, date, selected_car, selected_services1, comment=comment)

                    try:
                        new_order_dict = new_order.to_dict()

                        order_id = add_order_base(new_order_dict)  # Додаємо замовлення до бази даних
                        new_order._id = order_id  # Зберігаємо ID замовлення
                    except Exception as e:
                        print(e)

                    self.autoService.add_orderToStart(new_order)
                    self.clearOrderForm()
                except Exception as e:
                    print(e)

                # Додавання інформації про замовлення до таблиці
                #    row_position = self.tableWidgetForOutputCars.rowCount()
                #    self.tableWidgetForOutputCars.insertRow(row_position)
                #    self.tableWidgetForOutputCars.setItem(row_position, 0, QtWidgets.QTableWidgetItem(selected_car_info))
                #     self.tableWidgetForOutputCars.setItem(row_position, 1,
                #                                          QtWidgets.QTableWidgetItem(", ".join(selected_services)))
                #    self.tableWidgetForOutputCars.setItem(row_position, 2, QtWidgets.QTableWidgetItem(str(total_price)))
                #    self.tableWidgetForOutputCars.setItem(row_position, 3, QtWidgets.QTableWidgetItem(date))

                # Очищення форми після додавання замовлення

                try:
                    self.populateWorkerComboBox()
                except Exception as e:
                    print(e)
            else:
                print("No car selected.")  # Виведення повідомлення, якщо не вибрано авто
        except Exception as e:
            print(e)

    def updateOrderTable1(self):
        self.tableWidgetForOutputCars.clearContents()
        self.tableWidgetForOutputCars.setRowCount(0)

        orders = self.autoService.get_orders()  # Використовуємо ваш існуючий метод
        for order in orders:
            row_position = self.tableWidgetForOutputCars.rowCount()
            self.tableWidgetForOutputCars.insertRow(row_position)
            car_info = f"{order.car.get_brand()} {order.car.get_model()} {order.car.get_year()}"
            self.tableWidgetForOutputCars.setItem(row_position, 0, QtWidgets.QTableWidgetItem(car_info))
            services_names = ", ".join(order.get_ordered_services_names())
            self.tableWidgetForOutputCars.setItem(row_position, 1, QtWidgets.QTableWidgetItem(services_names))
            self.tableWidgetForOutputCars.setItem(row_position, 2, QtWidgets.QTableWidgetItem(str(order.cost)))
            self.tableWidgetForOutputCars.setItem(row_position, 3, QtWidgets.QTableWidgetItem(order.date))
            self.tableWidgetForOutputCars.setItem(row_position, 4, QtWidgets.QTableWidgetItem(
                order.get_comment() or ""))  # Add comment field

    def updateOrderTable(self):
        # Оновлення таблиці
        self.tableWidgetForOutputCars.clearContents()
        self.tableWidgetForOutputCars.setRowCount(0)

        orders = self.autoService.get_orders()
        for order in orders:
            row_position = self.tableWidgetForOutputCars.rowCount()
            self.tableWidgetForOutputCars.insertRow(row_position)
            car_info = f"{order.car.get_brand()} {order.car.get_model()} {order.car.get_year()}"
            self.tableWidgetForOutputCars.setItem(row_position, 0, QtWidgets.QTableWidgetItem(car_info))
            services_names = ", ".join(order.get_ordered_services_names())
            self.tableWidgetForOutputCars.setItem(row_position, 1, QtWidgets.QTableWidgetItem(services_names))
            self.tableWidgetForOutputCars.setItem(row_position, 2, QtWidgets.QTableWidgetItem(str(order.cost)))
            self.tableWidgetForOutputCars.setItem(row_position, 3, QtWidgets.QTableWidgetItem(order.date))
            self.tableWidgetForOutputCars.setItem(row_position, 4, QtWidgets.QTableWidgetItem(
                order.get_comment() or ""))  # Add comment field

    def clearOrderForm(self):
        # Очищення форми замовлення
        self.lineEditForPricePrint.clear()
        self.selected_services = []
        self.plainTextEdit_ForAddingComentAboutWork.clear()
        # Оновлення таблиці після очищення форми
        # self.updateOrderTable()
        self.clearServiceTable()

    def clearServiceTable(self):
        self.tableWidget_CurentService.clearContents()
        self.tableWidget_CurentService.setRowCount(0)

    def openDetailedServicesForm(self):
        self.detailedOrderForm = DetailedOrderForm()
        self.detailedOrderForm.show()

    def updateEmployeeData(self):
        self.populateWorkerComboBox()

    def initializeUI(self):
        self.pushButtonForAddOrder.setToolTip("Натисніть, щоб створити нове замовлення")
        self.tableWidgetForOutputCars.setToolTip("Таблиця з переліком доданих послуг")
        self.lineEditForPricePrint.setToolTip("Загальна вартість замовлення")
        self.dateEditForDateInput.setToolTip("Виберіть дату для замовлення")
        self.comboBoxForChoseService.setToolTip("Виберіть потрібну послугу")
        self.pushButtonForAddService.setToolTip("Натисніть, щоб додати послугу до замовлення")
        self.comboBoxForChosingCars.setToolTip("Виберіть автомобіль для обслуговування")
        self.tableWidget_CurentService.setToolTip("Таблиця з доданими послугами")
        self.pushButtonDetailedServices.setToolTip("Відкрити форму для перегляду та редагування замовлень")
        self.comboBox_ForChoseWorkerToWork.setToolTip("Виберіть працівників для виконання робіт")
        self.pushButton_ForAddWorkerToWork.setToolTip("Натисніть, щоб додати працівника до замовлення")
        self.tableWidget_AddWorkerToWork.setToolTip("Таблиця з доданими працівниками")
        self.pushButtonForDenyMakingOrder.setToolTip("Скинути всі поля форми")
        self.plainTextEdit_ForAddingComentAboutWork.setToolTip("Додайте коментар до замовлення (*необов'язково)")


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = OrderMakingForm()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
