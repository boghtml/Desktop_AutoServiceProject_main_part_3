# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'EmployeeManegementForm.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QMessageBox

from Calses.AutoService import AutoService
from Calses.Employee import Employee
from Calses.signals import signals
from DataBase_trial.DataBase import add_employee_base, remove_employees_base
from FormDesign.EmployeeManegementForm_design import Ui_Form


class EmployeeManegementForm(QtWidgets.QWidget, Ui_Form):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.autoService = AutoService.get_instance()

        self.pushButtonForAddWorker.clicked.connect(self.addWorker)
        self.pushButtonForSearching.clicked.connect(self.searchWorker)
        self.pushButtonAplySort.clicked.connect(self.sortByColumn)
        self.pushButtonForDelatingWorker.clicked.connect(self.deleteWorker)

        self.initializeServices()

        self.tableWidgetForOutputWorker.installEventFilter(self)

    def eventFilter(self, source, event):
        if event.type() == QtCore.QEvent.KeyPress and event.key() == QtCore.Qt.Key_Delete and source is self.tableWidgetForOutputWorker:
            self.confirmDeletionWorker()
        return super(EmployeeManegementForm, self).eventFilter(source, event)

    def confirmDeletionWorker(self):
        selected_items = self.tableWidgetForOutputWorker.selectedItems()
        if selected_items:
            selected_row = selected_items[0].row()
            worker_name = self.tableWidgetForOutputWorker.item(selected_row, 0).text()
            reply = QMessageBox.question(self, 'Підтвердження видалення',
                                         f"Ви впевнені, що хочете видалити працівника {worker_name}?",
                                         QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if reply == QMessageBox.Yes:
                self.autoService.removeEmployee(selected_row)
                self.updateEmployeeTable()
        else:
            QMessageBox.information(self, 'Інформація', 'Будь ласка, виберіть працівника для видалення.')

    def addWorker(self):
        name = self.lineEditForNameInput.text().strip()
        position = self.lineEditForPositionInput.text().strip()
        income = self.lineEditForIncomeInput.text().strip()

        if not name or not position or not income:
            QMessageBox.warning(self, 'Помилка', 'Будь ласка, заповніть усі поля.')
            return
        try:
            income = float(income)
        except ValueError:
            QMessageBox.warning(self, 'Помилка', 'Дохід має бути числом.')
            return

        new_employee = Employee(name, position, income)

        try:
            result = add_employee_base(new_employee)  # Додавання до бази даних
            new_employee._id = result.inserted_id  # Зберігання отриманого ID
        except Exception as e:
            print(e)

        self.autoService.addEmployee(new_employee)  # Додавання до AutoService

        signals.employee_added.emit()

        self.updateEmployeeTable()
        self.updateDeleteComboBox()

        self.lineEditForNameInput.setText("")
        self.lineEditForPositionInput.setText("")
        self.lineEditForIncomeInput.setText("")

    def searchWorker(self):
        searchQuery = self.lineEditForSearchingNameWorker.text().strip().lower()
        if not searchQuery:
            self.updateEmployeeTable()
        else:
            searchResults = [worker for worker in self.autoService.getEmployees() if
                             worker.name.lower().startswith(searchQuery)]
            if not searchResults:
                QtWidgets.QMessageBox.information(self, "Пошук", "Працівників не знайдено.")
                self.updateEmployeeTable(searchResults)
            else:
                self.updateEmployeeTable(searchResults)

    def sortByColumn(self):
        selected_column = self.comboBoxForSorting.currentText()
        if selected_column == "Ім'я":
            sorted_employees = sorted(self.autoService.getEmployees(), key=lambda emp: emp.get_name())
        elif selected_column == "Посада":
            sorted_employees = sorted(self.autoService.getEmployees(), key=lambda emp: emp.get_position())
        elif selected_column == "Дохід":
            sorted_employees = sorted(self.autoService.getEmployees(), key=lambda emp: emp.get_salary())
        else:
            sorted_employees = self.autoService.getEmployees()

        self.updateEmployeeTable(sorted_employees)

    def deleteWorker(self):
        selected_worker_index = self.comboBoxChoseWorkerForDelete.currentIndex()
        if selected_worker_index == -1:
            QMessageBox.warning(self, 'Помилка', 'Будь ласка, виберіть працівника для видалення.')
            return

        selected_employee = self.autoService.getEmployees()[selected_worker_index]
        remove_employees_base(selected_employee._id)  # видаляємо з бази даних за ID

        self.autoService.removeEmployee(selected_worker_index)  # видаляємо з AutoService
        self.updateEmployeeTable()
        self.updateDeleteComboBox()

    def updateDeleteComboBox(self):
        self.comboBoxChoseWorkerForDelete.clear()
        for employee in self.autoService.getEmployees():
            employee_info = f"{employee.get_name()} {employee.get_position()} {employee.get_salary()}"
            self.comboBoxChoseWorkerForDelete.addItem(employee_info)

    def updateEmployeeTable(self, employees=None):
        if employees is None:
            employees = self.autoService.getEmployees()

        self.tableWidgetForOutputWorker.setRowCount(len(employees))
        for row, emp in enumerate(employees):
            self.tableWidgetForOutputWorker.setItem(row, 0, QtWidgets.QTableWidgetItem(emp.get_name()))
            self.tableWidgetForOutputWorker.setItem(row, 1, QtWidgets.QTableWidgetItem(emp.get_position()))
            self.tableWidgetForOutputWorker.setItem(row, 2, QtWidgets.QTableWidgetItem(str(emp.get_salary())))

    def initializeServices(self):
        sorting_options = ["За замовчуванням", "Ім'я", "Посада", "Дохід"]
        self.comboBoxForSorting.addItems(sorting_options)

        self.updateEmployeeTable()
        self.updateDeleteComboBox()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    mainForm = EmployeeManegementForm()
    mainForm.show()
    sys.exit(app.exec_())
